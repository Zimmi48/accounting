module Evergreen.Migrate.V8 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V6.Types
import Evergreen.V8.Types
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V6.Types.FrontendModel -> ModelMigration Evergreen.V8.Types.FrontendModel Evergreen.V8.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V6.Types.BackendModel -> ModelMigration Evergreen.V8.Types.BackendModel Evergreen.V8.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V6.Types.FrontendMsg -> MsgMigration Evergreen.V8.Types.FrontendMsg Evergreen.V8.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V6.Types.ToBackend -> MsgMigration Evergreen.V8.Types.ToBackend Evergreen.V8.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V6.Types.BackendMsg -> MsgMigration Evergreen.V8.Types.BackendMsg Evergreen.V8.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V6.Types.ToFrontend -> MsgMigration Evergreen.V8.Types.ToFrontend Evergreen.V8.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_FrontendModel : Evergreen.V6.Types.FrontendModel -> Evergreen.V8.Types.FrontendModel
migrate_Types_FrontendModel old =
    { page = Evergreen.V8.Types.Home
    , showDialog = old.showDialog |> Maybe.map migrate_Types_Dialog
    , user = old.user
    , nameValidity = old.nameValidity |> migrate_Types_NameValidity
    , userGroups =
        old.userGroups
            |> Maybe.map
                (\rec ->
                    { debitors = rec.debitors |> List.map (\( t1, t2, t3 ) -> ( t1, t2 |> migrate_Types_Group, t3 |> migrate_Types_Amount ))
                    , creditors = rec.creditors |> List.map (\( t1, t2, t3 ) -> ( t1, t2 |> migrate_Types_Group, t3 |> migrate_Types_Amount ))
                    }
                )
    , group = old.group
    , groupValidity = old.groupValidity |> migrate_Types_NameValidity
    , groupTransactions =
        old.groupTransactions
            |> List.map
                (\rec ->
                    { description = rec.description
                    , year = rec.year
                    , month = rec.month
                    , day = rec.day
                    , total = rec.total |> migrate_Types_Amount
                    , share = rec.share |> migrate_Types_Amount
                    }
                )
    , key = old.key
    , windowWidth = old.windowWidth
    , windowHeight = old.windowHeight
    }


migrate_Types_AddGroupDialogModel : Evergreen.V6.Types.AddGroupDialogModel -> Evergreen.V8.Types.AddGroupDialogModel
migrate_Types_AddGroupDialogModel old =
    { name = old.name
    , nameInvalid = old.nameInvalid
    , members = old.members |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , submitted = old.submitted
    }


migrate_Types_AddPersonDialogModel : Evergreen.V6.Types.AddPersonDialogModel -> Evergreen.V8.Types.AddPersonDialogModel
migrate_Types_AddPersonDialogModel old =
    old


migrate_Types_AddSpendingDialogModel : Evergreen.V6.Types.AddSpendingDialogModel -> Evergreen.V8.Types.AddSpendingDialogModel
migrate_Types_AddSpendingDialogModel old =
    { description = old.description
    , date = old.date
    , dateText = old.dateText
    , datePickerModel = old.datePickerModel
    , total = old.total
    , credits = old.credits |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , debits = old.debits |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , submitted = old.submitted
    }


migrate_Types_Amount : Evergreen.V6.Types.Amount a_old -> Evergreen.V8.Types.Amount a_new
migrate_Types_Amount old =
    case old of
        Evergreen.V6.Types.Amount p0 ->
            Evergreen.V8.Types.Amount p0


migrate_Types_Dialog : Evergreen.V6.Types.Dialog -> Evergreen.V8.Types.Dialog
migrate_Types_Dialog old =
    case old of
        Evergreen.V6.Types.AddPersonDialog p0 ->
            Evergreen.V8.Types.AddPersonDialog (p0 |> migrate_Types_AddPersonDialogModel)

        Evergreen.V6.Types.AddGroupDialog p0 ->
            Evergreen.V8.Types.AddGroupDialog (p0 |> migrate_Types_AddGroupDialogModel)

        Evergreen.V6.Types.AddSpendingDialog p0 ->
            Evergreen.V8.Types.AddSpendingDialog (p0 |> migrate_Types_AddSpendingDialogModel)

        Evergreen.V6.Types.PasswordDialog p0 ->
            Evergreen.V8.Types.PasswordDialog (p0 |> migrate_Types_PasswordDialogModel)


migrate_Types_Group : Evergreen.V6.Types.Group -> Evergreen.V8.Types.Group
migrate_Types_Group old =
    old |> Dict.map (\k -> migrate_Types_Share)


migrate_Types_NameValidity : Evergreen.V6.Types.NameValidity -> Evergreen.V8.Types.NameValidity
migrate_Types_NameValidity old =
    case old of
        Evergreen.V6.Types.Complete ->
            Evergreen.V8.Types.Complete

        Evergreen.V6.Types.Incomplete ->
            Evergreen.V8.Types.Incomplete

        Evergreen.V6.Types.InvalidPrefix ->
            Evergreen.V8.Types.InvalidPrefix


migrate_Types_PasswordDialogModel : Evergreen.V6.Types.PasswordDialogModel -> Evergreen.V8.Types.PasswordDialogModel
migrate_Types_PasswordDialogModel old =
    old


migrate_Types_Share : Evergreen.V6.Types.Share -> Evergreen.V8.Types.Share
migrate_Types_Share old =
    case old of
        Evergreen.V6.Types.Share p0 ->
            Evergreen.V8.Types.Share p0
