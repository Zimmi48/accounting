module Evergreen.Migrate.V5 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V4.Types
import Evergreen.V5.Types
import Lamdera.Migrations exposing (..)
import List
import Maybe
import Set


frontendModel : Evergreen.V4.Types.FrontendModel -> ModelMigration Evergreen.V5.Types.FrontendModel Evergreen.V5.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V4.Types.BackendModel -> ModelMigration Evergreen.V5.Types.BackendModel Evergreen.V5.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V4.Types.FrontendMsg -> MsgMigration Evergreen.V5.Types.FrontendMsg Evergreen.V5.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V4.Types.ToBackend -> MsgMigration Evergreen.V5.Types.ToBackend Evergreen.V5.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V4.Types.BackendMsg -> MsgMigration Evergreen.V5.Types.BackendMsg Evergreen.V5.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V4.Types.ToFrontend -> MsgMigration Evergreen.V5.Types.ToFrontend Evergreen.V5.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_BackendModel : Evergreen.V4.Types.BackendModel -> Evergreen.V5.Types.BackendModel
migrate_Types_BackendModel old =
    { years = old.years |> Dict.map (\k -> migrate_Types_Year)
    , groups = old.groups |> Dict.map (\k -> migrate_Types_Group)
    , totalGroupCredits = old.totalGroupCredits |> Dict.map (\k -> Dict.map (\_ -> migrate_Types_Amount migrate_Types_Credit))
    , persons = old.persons
    , nextPersonId = old.nextPersonId
    , loggedInSessions = Set.empty
    }


migrate_Types_FrontendModel : Evergreen.V4.Types.FrontendModel -> Evergreen.V5.Types.FrontendModel
migrate_Types_FrontendModel old =
    { showDialog = old.showDialog |> Maybe.map migrate_Types_Dialog
    , user = old.user
    , nameValidity = old.nameValidity |> migrate_Types_NameValidity
    , userGroups =
        old.userGroups
            |> Maybe.map
                (\rec ->
                    { debitors = rec.debitors |> List.map (\( t1, t2, t3 ) -> ( t1, t2 |> migrate_Types_Group, t3 |> migrate_Types_Amount migrate_Types_Debit ))
                    , creditors = rec.creditors |> List.map (\( t1, t2, t3 ) -> ( t1, t2 |> migrate_Types_Group, t3 |> migrate_Types_Amount migrate_Types_Credit ))
                    }
                )
    , group = old.group
    , groupValidity = old.groupValidity |> migrate_Types_NameValidity
    , groupTransactions =
        old.groupTransactions
            |> List.map
                (\rec ->
                    { description = rec.description
                    , year = rec.year
                    , month = rec.month
                    , day = rec.day
                    , total = rec.total |> migrate_Types_Amount migrate_Types_Debit
                    , share = rec.share |> migrate_Types_Amount migrate_Types_Debit
                    }
                )
    , key = old.key
    }


migrate_Types_AddGroupDialogModel : Evergreen.V4.Types.AddGroupDialogModel -> Evergreen.V5.Types.AddGroupDialogModel
migrate_Types_AddGroupDialogModel old =
    { name = old.name
    , nameInvalid = old.nameInvalid
    , members = old.members |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , submitted = old.submitted
    }


migrate_Types_AddPersonDialogModel : Evergreen.V4.Types.AddPersonDialogModel -> Evergreen.V5.Types.AddPersonDialogModel
migrate_Types_AddPersonDialogModel old =
    old


migrate_Types_AddSpendingDialogModel : Evergreen.V4.Types.AddSpendingDialogModel -> Evergreen.V5.Types.AddSpendingDialogModel
migrate_Types_AddSpendingDialogModel old =
    { description = old.description
    , date = old.date
    , dateText = old.dateText
    , datePickerModel = old.datePickerModel
    , total = old.total
    , credits = old.credits |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , debits = old.debits |> List.map (\( t1, t2, t3 ) -> ( t1, t2, t3 |> migrate_Types_NameValidity ))
    , submitted = old.submitted
    }


migrate_Types_Amount : (a_old -> a_new) -> Evergreen.V4.Types.Amount a_old -> Evergreen.V5.Types.Amount a_new
migrate_Types_Amount migrate_a old =
    case old of
        Evergreen.V4.Types.Amount p0 ->
            Evergreen.V5.Types.Amount p0


migrate_Types_Credit : Evergreen.V4.Types.Credit -> Evergreen.V5.Types.Credit
migrate_Types_Credit old =
    case old of
        Evergreen.V4.Types.Credit ->
            Evergreen.V5.Types.Credit


migrate_Types_Day : Evergreen.V4.Types.Day -> Evergreen.V5.Types.Day
migrate_Types_Day old =
    { spendings = old.spendings |> List.map migrate_Types_Spending
    , totalGroupCredits = old.totalGroupCredits |> Dict.map (\k -> Dict.map (\_ -> migrate_Types_Amount migrate_Types_Credit))
    }


migrate_Types_Debit : Evergreen.V4.Types.Debit -> Evergreen.V5.Types.Debit
migrate_Types_Debit old =
    case old of
        Evergreen.V4.Types.Debit ->
            Evergreen.V5.Types.Debit


migrate_Types_Dialog : Evergreen.V4.Types.Dialog -> Evergreen.V5.Types.Dialog
migrate_Types_Dialog old =
    case old of
        Evergreen.V4.Types.AddPersonDialog p0 ->
            Evergreen.V5.Types.AddPersonDialog (p0 |> migrate_Types_AddPersonDialogModel)

        Evergreen.V4.Types.AddGroupDialog p0 ->
            Evergreen.V5.Types.AddGroupDialog (p0 |> migrate_Types_AddGroupDialogModel)

        Evergreen.V4.Types.AddSpendingDialog p0 ->
            Evergreen.V5.Types.AddSpendingDialog (p0 |> migrate_Types_AddSpendingDialogModel)


migrate_Types_FrontendMsg : Evergreen.V4.Types.FrontendMsg -> Evergreen.V5.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V4.Types.UrlClicked p0 ->
            Evergreen.V5.Types.UrlClicked p0

        Evergreen.V4.Types.UrlChanged p0 ->
            Evergreen.V5.Types.UrlChanged p0

        Evergreen.V4.Types.NoOpFrontendMsg ->
            Evergreen.V5.Types.NoOpFrontendMsg

        Evergreen.V4.Types.ShowAddPersonDialog ->
            Evergreen.V5.Types.ShowAddPersonDialog

        Evergreen.V4.Types.ShowAddGroupDialog ->
            Evergreen.V5.Types.ShowAddGroupDialog

        Evergreen.V4.Types.ShowAddSpendingDialog ->
            Evergreen.V5.Types.ShowAddSpendingDialog

        Evergreen.V4.Types.SetToday p0 ->
            Evergreen.V5.Types.SetToday p0

        Evergreen.V4.Types.Submit ->
            Evergreen.V5.Types.Submit

        Evergreen.V4.Types.Cancel ->
            Evergreen.V5.Types.Cancel

        Evergreen.V4.Types.UpdateName p0 ->
            Evergreen.V5.Types.UpdateName p0

        Evergreen.V4.Types.AddMember p0 ->
            Evergreen.V5.Types.AddMember p0

        Evergreen.V4.Types.UpdateMember p0 p1 ->
            Evergreen.V5.Types.UpdateMember p0 p1

        Evergreen.V4.Types.UpdateShare p0 p1 ->
            Evergreen.V5.Types.UpdateShare p0 p1

        Evergreen.V4.Types.ChangeDatePicker p0 ->
            Evergreen.V5.Types.ChangeDatePicker p0

        Evergreen.V4.Types.UpdateTotal p0 ->
            Evergreen.V5.Types.UpdateTotal p0

        Evergreen.V4.Types.AddCreditor p0 ->
            Evergreen.V5.Types.AddCreditor p0

        Evergreen.V4.Types.UpdateCreditor p0 p1 ->
            Evergreen.V5.Types.UpdateCreditor p0 p1

        Evergreen.V4.Types.UpdateCredit p0 p1 ->
            Evergreen.V5.Types.UpdateCredit p0 p1

        Evergreen.V4.Types.AddDebitor p0 ->
            Evergreen.V5.Types.AddDebitor p0

        Evergreen.V4.Types.UpdateDebitor p0 p1 ->
            Evergreen.V5.Types.UpdateDebitor p0 p1

        Evergreen.V4.Types.UpdateDebit p0 p1 ->
            Evergreen.V5.Types.UpdateDebit p0 p1

        Evergreen.V4.Types.UpdateGroupName p0 ->
            Evergreen.V5.Types.UpdateGroupName p0


migrate_Types_Group : Evergreen.V4.Types.Group -> Evergreen.V5.Types.Group
migrate_Types_Group old =
    old |> Dict.map (\k -> migrate_Types_Share)


migrate_Types_Month : Evergreen.V4.Types.Month -> Evergreen.V5.Types.Month
migrate_Types_Month old =
    { days = old.days |> Dict.map (\k -> migrate_Types_Day)
    , totalGroupCredits = old.totalGroupCredits |> Dict.map (\k -> Dict.map (\_ -> migrate_Types_Amount migrate_Types_Credit))
    }


migrate_Types_NameValidity : Evergreen.V4.Types.NameValidity -> Evergreen.V5.Types.NameValidity
migrate_Types_NameValidity old =
    case old of
        Evergreen.V4.Types.Complete ->
            Evergreen.V5.Types.Complete

        Evergreen.V4.Types.Incomplete ->
            Evergreen.V5.Types.Incomplete

        Evergreen.V4.Types.InvalidPrefix ->
            Evergreen.V5.Types.InvalidPrefix


migrate_Types_Share : Evergreen.V4.Types.Share -> Evergreen.V5.Types.Share
migrate_Types_Share old =
    case old of
        Evergreen.V4.Types.Share p0 ->
            Evergreen.V5.Types.Share p0


migrate_Types_Spending : Evergreen.V4.Types.Spending -> Evergreen.V5.Types.Spending
migrate_Types_Spending old =
    { description = old.description
    , total = old.total |> migrate_Types_Amount migrate_Types_Credit
    , groupCredits = old.groupCredits |> Dict.map (\k -> migrate_Types_Amount migrate_Types_Credit)
    }


migrate_Types_ToBackend : Evergreen.V4.Types.ToBackend -> Evergreen.V5.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V4.Types.NoOpToBackend ->
            Evergreen.V5.Types.NoOpToBackend

        Evergreen.V4.Types.CheckValidName p0 ->
            Evergreen.V5.Types.CheckValidName p0

        Evergreen.V4.Types.AutocompletePerson p0 ->
            Evergreen.V5.Types.AutocompletePerson p0

        Evergreen.V4.Types.AutocompleteGroup p0 ->
            Evergreen.V5.Types.AutocompleteGroup p0

        Evergreen.V4.Types.CreatePerson p0 ->
            Evergreen.V5.Types.CreatePerson p0

        Evergreen.V4.Types.CreateGroup p0 p1 ->
            Evergreen.V5.Types.CreateGroup p0 (p1 |> Dict.map (\k -> migrate_Types_Share))

        Evergreen.V4.Types.CreateSpending p0 ->
            Evergreen.V5.Types.CreateSpending
                { description = p0.description
                , year = p0.year
                , month = p0.month
                , day = p0.day
                , total = p0.total |> migrate_Types_Amount migrate_Types_Credit
                , credits = p0.credits |> Dict.map (\k -> migrate_Types_Amount migrate_Types_Credit)
                , debits = p0.debits |> Dict.map (\k -> migrate_Types_Amount migrate_Types_Debit)
                }

        Evergreen.V4.Types.RequestUserGroups p0 ->
            Evergreen.V5.Types.RequestUserGroups p0

        Evergreen.V4.Types.RequestGroupTransactions p0 ->
            Evergreen.V5.Types.RequestGroupTransactions p0


migrate_Types_Year : Evergreen.V4.Types.Year -> Evergreen.V5.Types.Year
migrate_Types_Year old =
    { months = old.months |> Dict.map (\k -> migrate_Types_Month)
    , totalGroupCredits = old.totalGroupCredits |> Dict.map (\k -> Dict.map (\_ -> migrate_Types_Amount migrate_Types_Credit))
    }
